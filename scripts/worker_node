#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import json
from threading import Timer

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_msgs.msg import Demand, Result
from ipfs_common.msg import Multihash
from ipfs_common.ipfs_rosbag import IpfsRosBag

from sen0233_sensor_agent.sensors import SEN0233

class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        self.interval = int(rospy.get_param("~interval"))
        self.result_publish = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        self.sensor = SEN0233()

        rospy.loginfo('Worker node is launched')

    def get_multihash(self, data: dict) -> Multihash:
        topics = {
                "/data": [String(json.dumps(data))]
                }
        bag = IpfsRosBag(messages=topics)
        return bag.multihash

    def spin(self):
        def send_result():
            rospy.loginfo("Sending result...")

            result_dict = self.sensor.data()

            res = Result()
            res.liability = Address("0x0000000000000000000000000000000000000000")
            res.result = self.get_multihash(result_dict)
            res.success = True

            rospy.loginfo(res)

            self.result_publish.publish(res)

            Timer(self.interval, send_result)

        send_result()
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()

